//find next least deadline more than this task and laxity more than this
        int next_least_deadline_task = get_next_edf(min_deadline_task, rdqueue, nproc);
        cur_task_id = rdqueue[min_deadline_task]->task_id;
        if(min_deadline_task != -1) {
            //printf("time:%d process executing: %d\n", cur_time, cur_proc->pid);
            /*FILE *schedule_file = fopen("schedule.txt", "a+");
            int laxity = rdqueue[min_deadline_task]->task_ref->deadline - cur_time - rdqueue[min_deadline_task]->ret;
            fprintf(schedule_file, "time:%d process executing: %d actual execution time = %d laxity: %d\n", cur_time,
                     cur_proc->pid, cur_proc->wcet, laxity);
            printf("time:%d process executing: %d actual execution time = %d laxity: %d\n", cur_time, cur_proc->pid, cur_proc->aet, laxity);
            fclose(schedule_file);*/
            //find the next least slack time job
            float deadline_diff = rdqueue[next_least_deadline_task]->task_ref->deadline - rdqueue[min_deadline_task]->slack;
            float next_completion = rdqueue[min_deadline_task]->ret;
            float next_arrival = get_next_arrival(rdqueue, cur_time, nproc) -cur_time;
            //Processor claimed by the job for âˆ† = next-min-slack-time - current-slack-time.

            printf("next completion %f", next_completion+cur_time);
            printf("next arrival %f \n", next_arrival+cur_time);
            float next_decision = min(deadline_diff, min(next_completion, next_arrival));
                rdqueue[min_deadline_task]->ret -= next_decision;
                cur_time += next_decision;
            //cur_time++;
            if(rdqueue[min_deadline_task]->ret == 0) {
                /*FILE *log_file = fopen("sched-op-lst.txt", "a+");
                int response_time = cur_time - cur_proc->task_ref->next_release_time - cur_proc->task_ref->period; 
                fprintf(log_file, "task: %d pid:%d aet: %d RESPONSE TIME: %d ", cur_proc->task_id, cur_proc->pid,
                            cur_proc->aet, response_time);
                fclose(log_file);*/
                //updated anticipated_arrival list
                //arrival_list_add(cur_proc->task_ref->next_release_time);
                //pqueue_extract_process(rdqueue, cur_proc);
                rdqueue[min_deadline_task] = NULL;
                /**
                *free
                */
                //unlink from job lists
                //remove_job(cur_proc->task_ref, cur_proc);
            }
        }
        else {
            cur_time++;
            cpu_idle_time++;
        }
        /*FILE *log_file = fopen("sched-op-lst.txt", "a+");
            fprintf(log_file, "cache impact: %d", check_cache_impact(cur_task_id, prev_task_id));
        fclose(log_file);*/
        prev_task_id = cur_task_id;
        //update slacks
        update_slack(rdqueue, nproc, cur_time);